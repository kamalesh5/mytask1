provider "aws" {
  region = "ap-south-1"
  profile = "kamalterra1"
}

#creating key pair.

resource "tls_private_key" "ec2_key" {
  algorithm = "RSA"
  rsa_bits = 4096
}

resource "local_file" "private_key" {
  content  = tls_private_key.ec2_key.private_key_pem
  filename = "mykey1.pem"
}

resource "aws_key_pair" "created_key" {
  key_name = "mykey"
  public_key = tls_private_key.ec2_key.public_key_openssh
}

#creating security group.

resource "aws_security_group" "http_allow" {
  name = "http_allow"
  vpc_id = "vpc-b3d0ccdb"

  ingress{
    description = "HTTP"
    from_port  = 80
    to_port =  80
    protocol = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }

  ingress{
    description = "SSH"
    from_port = 22
    to_port = 22
    protocol = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }

  egress {
    from_port = 0
    to_port = 0
    protocol = "-1"
    cidr_blocks = ["0.0.0.0/0"]
  }
  
  tags = {
    name = "mysec"
  }
}

#creating and launching ec2 instance.

resource "aws_instance" "myec2" {
  ami = "ami-0447a12f28fddb066"
  instance_type = "t2.micro"
  key_name = "mykey"
  security_groups = ["http_allow"]

  connection {
    type = "ssh"
    user = "ec2-user"
    private_key = tls_private_key.ec2_key.private_key_pem
    host = aws_instance.myec2.public_ip
  }

  provisioner "remote-exec" {
    inline = [
      "sudo yum install httpd php git -y",
      "sudo systemctl restart httpd",
      "sudo systemctl enable httpd"
      ]
  }
  tags = {
      name = "kamalos"
  }
}

#creating ebs volume.

resource "aws_ebs_volume" "ebs" {
  availability_zone = aws_instance.myec2.availability_zone
  size = 1
  tags = {
    name = "myebs"
  }
}

#volume attachment.

resource "aws_volume_attachment" "ebs_att" {
  device_name = "/dev/sdh"
  volume_id ="${aws_ebs_volume.ebs.id}"
  instance_id = "${aws_instance.myec2.id}"
  force_detach = true
}

resource "null_resource" "nulllocal1" {
  depends_on = [
    aws_volume_attachment.ebs_att 
  ]

  connection {
    type = "ssh"
    user = "ec2-user"
    private_key = tls_private_key.ec2_key.private_key_pem
    host = aws_instance.myec2.public_ip
    }

  provisioner "remote-exec" {
    inline = [
      "sudo mkfs.ext4 /dev/xvdh",
      "sudo mount /dev/xvdh  /var/www/html",
      "sudo rm -rf /var/www/html/*",
      "sudo git clone https://github.com/kamalesh5/myp1.git /var/www/html"
    ]
  }
}

# creating s3 bucket.

resource "aws_s3_bucket" "mybuck000" {
  bucket = "mybuck000"
  acl = "public-read"
  tags = {
    name = "mubucket1"
  }
  
  versioning { 
    enabled = true
  }
}

resource "aws_s3_bucket_object" "s3ob" {
  bucket = "${aws_s3_bucket.mybuck000.id}"
  key = "kamal.jpg"
  source = "c:/users/dell/pictures/kamalesh.jpg"
}

# creating cloudfront.

resource "aws_cloudfront_origin_access_identity" "oai" {
  comment = "this is OAI"
}


resource "aws_cloudfront_distribution" "mycf" {
  origin {
    domain_name= "mybuck.s3.amazonaws.com"
    origin_id = "s3-mybuck" 

    s3_origin_config {
      origin_access_identity = aws_cloudfront_origin_access_identity.oai.cloudfront_access_identity_path
    }
  }
  enabled = true
    is_ipv6_enabled = true

  default_cache_behavior {
    allowed_methods = [ "DELETE" , "GET" , "HEAD" , "OPTIONS" , "PATCH" , "POST" , "PUT" ]
    cached_methods = [ "GET" , "HEAD" ]
    target_origin_id = "s3-mybuck"

  forwarded_values {
    query_string = false
  
  cookies {
    forward = "none"
    }
  }
  viewer_protocol_policy = "allow-all"
  min_ttl = 0
  default_ttl = 10
  max_ttl = 30
  }

  restrictions {
    geo_restriction { 
      restriction_type = "none"
    }
 }

 # ssl certificate.

  viewer_certificate {
    cloudfront_default_certificate = true
  }
}
 


